{"version":3,"sources":["meteor://ðŸ’»app/packages/socket-stream-client/browser.js","meteor://ðŸ’»app/packages/socket-stream-client/common.js","meteor://ðŸ’»app/packages/socket-stream-client/urls.js"],"names":["module","export","ClientStream","toSockjsUrl","toWebsocketUrl","watch","require","v","StreamClientCommon","constructor","url","options","_initCommon","HEARTBEAT_TIMEOUT","rawUrl","socket","lastError","heartbeatTimer","window","addEventListener","_online","bind","_launchConnection","send","data","currentStatus","connected","_changeUrl","_connected","connectionTimer","clearTimeout","status","retryCount","statusChanged","forEachCallback","callback","_cleanup","maybeError","_clearConnectionAndHeartbeatTimers","onmessage","onclose","onerror","onheartbeat","close","_heartbeat_timeout","console","log","_lostConnection","ConnectionError","_heartbeat_received","_forcedToDisconnect","setTimeout","_sockjsProtocolsWhitelist","protocolsWhitelist","noWebsockets","navigator","test","userAgent","concat","protocols_whitelist","_sockjsOptions","hasSockJS","SockJS","undefined","WebSocket","onopen","Promise","resolve","done","error","Date","toDateString","CONNECT_TIMEOUT","Retry","forcedReconnectError","Error","retry","on","name","eventCallbacks","push","cb","length","forEach","Object","create","connectTimeoutMs","Package","tracker","statusListeners","Tracker","Dependency","changed","_retry","reconnect","_force","clear","_retryNow","disconnect","_permanent","_error","reason","_retryLater","timeout","retryLater","retryTime","getTime","depend","translateUrl","newSchemeBase","subPath","startsWith","Meteor","absoluteUrl","substr","ddpUrlMatch","match","httpUrlMatch","newScheme","urlAfterDDP","slashPos","indexOf","host","rest","replace","Math","floor","random","urlAfterHttp","_relativeToSiteRootUrl","endsWith"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,gBAAa,MAAIA;AAAlB,CAAd;AAA+C,IAAIC,WAAJ,EAAgBC,cAAhB;AAA+BJ,OAAOK,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACH,cAAYI,CAAZ,EAAc;AAACJ,kBAAYI,CAAZ;AAAc,GAA9B;;AAA+BH,iBAAeG,CAAf,EAAiB;AAACH,qBAAeG,CAAf;AAAiB;;AAAlE,CAAlC,EAAsG,CAAtG;AAAyG,IAAIC,kBAAJ;AAAuBR,OAAOK,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACE,qBAAmBD,CAAnB,EAAqB;AAACC,yBAAmBD,CAAnB;AAAqB;;AAA5C,CAApC,EAAkF,CAAlF;;AAOvM,MAAML,YAAN,SAA2BM,kBAA3B,CAA8C;AACnD;AACA;AACA;AACAC,cAAYC,GAAZ,EAAiBC,OAAjB,EAA0B;AACxB,UAAMA,OAAN;;AAEA,SAAKC,WAAL,CAAiB,KAAKD,OAAtB,EAHwB,CAKxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAKE,iBAAL,GAAyB,MAAM,IAA/B;AAEA,SAAKC,MAAL,GAAcJ,GAAd;AACA,SAAKK,MAAL,GAAc,IAAd;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAEA,SAAKC,cAAL,GAAsB,IAAtB,CAtBwB,CAwBxB;AACA;;AACA,QAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,OAAOC,gBAA5C,EACED,OAAOC,gBAAP,CACE,QADF,EAEE,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAFF,EAGE;AAAM;AAHR,MA3BsB,CAiCxB;;AACA,SAAKC,iBAAL;AACD,GAvCkD,CAyCnD;AACA;AACA;;;AACAC,OAAKC,IAAL,EAAW;AACT,QAAI,KAAKC,aAAL,CAAmBC,SAAvB,EAAkC;AAChC,WAAKX,MAAL,CAAYQ,IAAZ,CAAiBC,IAAjB;AACD;AACF,GAhDkD,CAkDnD;;;AACAG,aAAWjB,GAAX,EAAgB;AACd,SAAKI,MAAL,GAAcJ,GAAd;AACD;;AAEDkB,eAAa;AACX,QAAI,KAAKC,eAAT,EAA0B;AACxBC,mBAAa,KAAKD,eAAlB;AACA,WAAKA,eAAL,GAAuB,IAAvB;AACD;;AAED,QAAI,KAAKJ,aAAL,CAAmBC,SAAvB,EAAkC;AAChC;AACA;AACD,KATU,CAWX;;;AACA,SAAKD,aAAL,CAAmBM,MAAnB,GAA4B,WAA5B;AACA,SAAKN,aAAL,CAAmBC,SAAnB,GAA+B,IAA/B;AACA,SAAKD,aAAL,CAAmBO,UAAnB,GAAgC,CAAhC;AACA,SAAKC,aAAL,GAfW,CAiBX;AACA;;AACA,SAAKC,eAAL,CAAqB,OAArB,EAA8BC,YAAY;AACxCA;AACD,KAFD;AAGD;;AAEDC,WAASC,UAAT,EAAqB;AACnB,SAAKC,kCAAL;;AACA,QAAI,KAAKvB,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYwB,SAAZ,GAAwB,KAAKxB,MAAL,CAAYyB,OAAZ,GAAsB,KAAKzB,MAAL,CAAY0B,OAAZ,GAAsB,KAAK1B,MAAL,CAAY2B,WAAZ,GAA0B,MAAM,CAAE,CAAtG;;AACA,WAAK3B,MAAL,CAAY4B,KAAZ;AACA,WAAK5B,MAAL,GAAc,IAAd;AACD;;AAED,SAAKmB,eAAL,CAAqB,YAArB,EAAmCC,YAAY;AAC7CA,eAASE,UAAT;AACD,KAFD;AAGD;;AAEDC,uCAAqC;AACnC,QAAI,KAAKT,eAAT,EAA0B;AACxBC,mBAAa,KAAKD,eAAlB;AACA,WAAKA,eAAL,GAAuB,IAAvB;AACD;;AACD,QAAI,KAAKZ,cAAT,EAAyB;AACvBa,mBAAa,KAAKb,cAAlB;AACA,WAAKA,cAAL,GAAsB,IAAtB;AACD;AACF;;AAED2B,uBAAqB;AACnBC,YAAQC,GAAR,CAAY,mDAAZ;;AACA,SAAKC,eAAL,CAAqB,IAAI,KAAKC,eAAT,CAAyB,qBAAzB,CAArB;AACD;;AAEDC,wBAAsB;AACpB;AACA;AACA,QAAI,KAAKC,mBAAT,EAA8B;AAC9B,QAAI,KAAKjC,cAAT,EAAyBa,aAAa,KAAKb,cAAlB;AACzB,SAAKA,cAAL,GAAsBkC,WACpB,KAAKP,kBAAL,CAAwBvB,IAAxB,CAA6B,IAA7B,CADoB,EAEpB,KAAKR,iBAFe,CAAtB;AAID;;AAEDuC,8BAA4B;AAC1B;AACA;AACA,QAAIC,qBAAqB,CACvB,aADuB,EAEvB,aAFuB,EAGvB,oBAHuB,EAIvB,eAJuB,CAAzB,CAH0B,CAU1B;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIC,eACFC,aACA,mBAAmBC,IAAnB,CAAwBD,UAAUE,SAAlC,CADA,IAEA,cAAcD,IAAd,CAAmBD,UAAUE,SAA7B,CAHF;AAKA,QAAI,CAACH,YAAL,EACED,qBAAqB,CAAC,WAAD,EAAcK,MAAd,CAAqBL,kBAArB,CAArB;AAEF,WAAOA,kBAAP;AACD;;AAED/B,sBAAoB;AAClB,SAAKc,QAAL,GADkB,CACD;;;AAEjB,QAAIzB;AACFgD,2BAAqB,KAAKP,yBAAL;AADnB,OAEC,KAAKzC,OAAL,CAAaiD,cAFd,CAAJ;AAKA,UAAMC,YAAY,OAAOC,MAAP,KAAkB,UAApC;AAEA,SAAK/C,MAAL,GAAc8C,UACZ;AACA;AACA;AAHY,MAIV,IAAIC,MAAJ,CAAW3D,YAAY,KAAKW,MAAjB,CAAX,EAAqCiD,SAArC,EAAgDpD,OAAhD,CAJU,GAKV,IAAIqD,SAAJ,CAAc5D,eAAe,KAAKU,MAApB,CAAd,CALJ;;AAOA,SAAKC,MAAL,CAAYkD,MAAZ,GAAqBzC,QAAQ;AAC3B,WAAKR,SAAL,GAAiB,IAAjB;;AACA,WAAKY,UAAL;AACD,KAHD;;AAKA,SAAKb,MAAL,CAAYwB,SAAZ,GAAwBf,QAAQ;AAC9B,WAAKR,SAAL,GAAiB,IAAjB;;AACA,WAAKiC,mBAAL;;AACA,UAAI,KAAKxB,aAAL,CAAmBC,SAAvB,EAAkC;AAChC,aAAKQ,eAAL,CAAqB,SAArB,EAAgCC,YAAY;AAC1CA,mBAASX,KAAKA,IAAd;AACD,SAFD;AAGD;AACF,KARD;;AAUA,SAAKT,MAAL,CAAYyB,OAAZ,GAAsB,MAAM;AAC1B0B,cAAQC,OAAR,EACE;AACA;AACA;AACA,WAAKnD,SAAL,IACA,CAAE6C,SADF,yBAEO,mBAFP,CAJF,EAOEO,IAPF,CAOO,MAAM;AACX,aAAKrB,eAAL;AACD,OATD;AAUD,KAXD;;AAaA,SAAKhC,MAAL,CAAY0B,OAAZ,GAAsB4B,SAAS;AAC7B,YAAM;AAAErD;AAAF,UAAgB,IAAtB;AACA,WAAKA,SAAL,GAAiBqD,KAAjB;AACA,UAAIrD,SAAJ,EAAe;AACf6B,cAAQC,GAAR,CACE,cADF,EAEEuB,KAFF,EAGE,IAAIC,IAAJ,GAAWC,YAAX,EAHF;AAKD,KATD;;AAWA,SAAKxD,MAAL,CAAY2B,WAAZ,GAA0B,MAAM;AAC9B,WAAK1B,SAAL,GAAiB,IAAjB;;AACA,WAAKiC,mBAAL;AACD,KAHD;;AAKA,QAAI,KAAKpB,eAAT,EAA0BC,aAAa,KAAKD,eAAlB;AAC1B,SAAKA,eAAL,GAAuBsB,WAAW,MAAM;AACtC,WAAKJ,eAAL,CACE,IAAI,KAAKC,eAAT,CAAyB,0BAAzB,CADF;AAGD,KAJsB,EAIpB,KAAKwB,eAJe,CAAvB;AAKD;;AArNkD,C;;;;;;;;;;;;;;;ACPrDxE,OAAOC,MAAP,CAAc;AAACO,sBAAmB,MAAIA;AAAxB,CAAd;AAA2D,IAAIiE,KAAJ;AAAUzE,OAAOK,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACmE,QAAMlE,CAAN,EAAQ;AAACkE,YAAMlE,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAErE,MAAMmE,uBAAuB,IAAIC,KAAJ,CAAU,kBAAV,CAA7B;;AAEO,MAAMnE,kBAAN,CAAyB;AAC9BC,cAAYE,OAAZ,EAAqB;AACnB,SAAKA,OAAL;AACEiE,aAAO;AADT,OAEMjE,WAAW,IAFjB;AAKA,SAAKqC,eAAL,GACErC,WAAWA,QAAQqC,eAAnB,IAAsC2B,KADxC;AAED,GAT6B,CAW9B;;;AACAE,KAAGC,IAAH,EAAS3C,QAAT,EAAmB;AACjB,QAAI2C,SAAS,SAAT,IAAsBA,SAAS,OAA/B,IAA0CA,SAAS,YAAvD,EACE,MAAM,IAAIH,KAAJ,CAAU,yBAAyBG,IAAnC,CAAN;AAEF,QAAI,CAAC,KAAKC,cAAL,CAAoBD,IAApB,CAAL,EAAgC,KAAKC,cAAL,CAAoBD,IAApB,IAA4B,EAA5B;AAChC,SAAKC,cAAL,CAAoBD,IAApB,EAA0BE,IAA1B,CAA+B7C,QAA/B;AACD;;AAEDD,kBAAgB4C,IAAhB,EAAsBG,EAAtB,EAA0B;AACxB,QAAI,CAAC,KAAKF,cAAL,CAAoBD,IAApB,CAAD,IAA8B,CAAC,KAAKC,cAAL,CAAoBD,IAApB,EAA0BI,MAA7D,EAAqE;AACnE;AACD;;AAED,SAAKH,cAAL,CAAoBD,IAApB,EAA0BK,OAA1B,CAAkCF,EAAlC;AACD;;AAEDrE,cAAYD,OAAZ,EAAqB;AACnBA,cAAUA,WAAWyE,OAAOC,MAAP,CAAc,IAAd,CAArB,CADmB,CAGnB;AAEA;AACA;;AACA,SAAKb,eAAL,GAAuB7D,QAAQ2E,gBAAR,IAA4B,KAAnD;AAEA,SAAKP,cAAL,GAAsBK,OAAOC,MAAP,CAAc,IAAd,CAAtB,CATmB,CASwB;;AAE3C,SAAKnC,mBAAL,GAA2B,KAA3B,CAXmB,CAanB;;AACA,SAAKzB,aAAL,GAAqB;AACnBM,cAAQ,YADW;AAEnBL,iBAAW,KAFQ;AAGnBM,kBAAY;AAHO,KAArB;;AAMA,QAAIuD,QAAQC,OAAZ,EAAqB;AACnB,WAAKC,eAAL,GAAuB,IAAIF,QAAQC,OAAR,CAAgBE,OAAhB,CAAwBC,UAA5B,EAAvB;AACD;;AAED,SAAK1D,aAAL,GAAqB,MAAM;AACzB,UAAI,KAAKwD,eAAT,EAA0B;AACxB,aAAKA,eAAL,CAAqBG,OAArB;AACD;AACF,KAJD,CAxBmB,CA8BnB;;;AACA,SAAKC,MAAL,GAAc,IAAIpB,KAAJ,EAAd;AACA,SAAK5C,eAAL,GAAuB,IAAvB;AACD,GA7D6B,CA+D9B;;;AACAiE,YAAUnF,OAAV,EAAmB;AACjBA,cAAUA,WAAWyE,OAAOC,MAAP,CAAc,IAAd,CAArB;;AAEA,QAAI1E,QAAQD,GAAZ,EAAiB;AACf,WAAKiB,UAAL,CAAgBhB,QAAQD,GAAxB;AACD;;AAED,QAAIC,QAAQiD,cAAZ,EAA4B;AAC1B,WAAKjD,OAAL,CAAaiD,cAAb,GAA8BjD,QAAQiD,cAAtC;AACD;;AAED,QAAI,KAAKnC,aAAL,CAAmBC,SAAvB,EAAkC;AAChC,UAAIf,QAAQoF,MAAR,IAAkBpF,QAAQD,GAA9B,EAAmC;AACjC,aAAKqC,eAAL,CAAqB2B,oBAArB;AACD;;AACD;AACD,KAhBgB,CAkBjB;;;AACA,QAAI,KAAKjD,aAAL,CAAmBM,MAAnB,KAA8B,YAAlC,EAAgD;AAC9C;AACA,WAAKgB,eAAL;AACD;;AAED,SAAK8C,MAAL,CAAYG,KAAZ;;AACA,SAAKvE,aAAL,CAAmBO,UAAnB,IAAiC,CAAjC,CAzBiB,CAyBmB;;AACpC,SAAKiE,SAAL;AACD;;AAEDC,aAAWvF,OAAX,EAAoB;AAClBA,cAAUA,WAAWyE,OAAOC,MAAP,CAAc,IAAd,CAArB,CADkB,CAGlB;AACA;;AACA,QAAI,KAAKnC,mBAAT,EAA8B,OALZ,CAOlB;AACA;AACA;AACA;;AACA,QAAIvC,QAAQwF,UAAZ,EAAwB;AACtB,WAAKjD,mBAAL,GAA2B,IAA3B;AACD;;AAED,SAAKd,QAAL;;AACA,SAAKyD,MAAL,CAAYG,KAAZ;;AAEA,SAAKvE,aAAL,GAAqB;AACnBM,cAAQpB,QAAQwF,UAAR,GAAqB,QAArB,GAAgC,SADrB;AAEnBzE,iBAAW,KAFQ;AAGnBM,kBAAY;AAHO,KAArB;AAMA,QAAIrB,QAAQwF,UAAR,IAAsBxF,QAAQyF,MAAlC,EACE,KAAK3E,aAAL,CAAmB4E,MAAnB,GAA4B1F,QAAQyF,MAApC;AAEF,SAAKnE,aAAL;AACD,GAzH6B,CA2H9B;;;AACAc,kBAAgBV,UAAhB,EAA4B;AAC1B,SAAKD,QAAL,CAAcC,UAAd;;AACA,SAAKiE,WAAL,CAAiBjE,UAAjB,EAF0B,CAEI;;AAC/B,GA/H6B,CAiI9B;AACA;;;AACAjB,YAAU;AACR;AACA,QAAI,KAAKK,aAAL,CAAmBM,MAAnB,IAA6B,SAAjC,EAA4C,KAAK+D,SAAL;AAC7C;;AAEDQ,cAAYjE,UAAZ,EAAwB;AACtB,QAAIkE,UAAU,CAAd;;AACA,QAAI,KAAK5F,OAAL,CAAaiE,KAAb,IACAvC,eAAeqC,oBADnB,EACyC;AACvC6B,gBAAU,KAAKV,MAAL,CAAYW,UAAZ,CACR,KAAK/E,aAAL,CAAmBO,UADX,EAER,KAAKiE,SAAL,CAAe5E,IAAf,CAAoB,IAApB,CAFQ,CAAV;AAIA,WAAKI,aAAL,CAAmBM,MAAnB,GAA4B,SAA5B;AACA,WAAKN,aAAL,CAAmBgF,SAAnB,GAA+B,IAAInC,IAAJ,GAAWoC,OAAX,KAAuBH,OAAtD;AACD,KARD,MAQO;AACL,WAAK9E,aAAL,CAAmBM,MAAnB,GAA4B,QAA5B;AACA,aAAO,KAAKN,aAAL,CAAmBgF,SAA1B;AACD;;AAED,SAAKhF,aAAL,CAAmBC,SAAnB,GAA+B,KAA/B;AACA,SAAKO,aAAL;AACD;;AAEDgE,cAAY;AACV,QAAI,KAAK/C,mBAAT,EAA8B;AAE9B,SAAKzB,aAAL,CAAmBO,UAAnB,IAAiC,CAAjC;AACA,SAAKP,aAAL,CAAmBM,MAAnB,GAA4B,YAA5B;AACA,SAAKN,aAAL,CAAmBC,SAAnB,GAA+B,KAA/B;AACA,WAAO,KAAKD,aAAL,CAAmBgF,SAA1B;AACA,SAAKxE,aAAL;;AAEA,SAAKX,iBAAL;AACD,GArK6B,CAuK9B;;;AACAS,WAAS;AACP,QAAI,KAAK0D,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBkB,MAArB;AACD;;AACD,WAAO,KAAKlF,aAAZ;AACD;;AA7K6B,C;;;;;;;;;;;ACJhCzB,OAAOC,MAAP,CAAc;AAACE,eAAY,MAAIA,WAAjB;AAA6BC,kBAAe,MAAIA;AAAhD,CAAd;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwG,YAAT,CAAsBlG,GAAtB,EAA2BmG,aAA3B,EAA0CC,OAA1C,EAAmD;AACjD,MAAI,CAACD,aAAL,EAAoB;AAClBA,oBAAgB,MAAhB;AACD;;AAED,MAAIC,YAAY,QAAZ,IAAwBpG,IAAIqG,UAAJ,CAAe,GAAf,CAA5B,EAAiD;AAC/CrG,UAAMsG,OAAOC,WAAP,CAAmBvG,IAAIwG,MAAJ,CAAW,CAAX,CAAnB,CAAN;AACD;;AAED,MAAIC,cAAczG,IAAI0G,KAAJ,CAAU,uBAAV,CAAlB;AACA,MAAIC,eAAe3G,IAAI0G,KAAJ,CAAU,gBAAV,CAAnB;AACA,MAAIE,SAAJ;;AACA,MAAIH,WAAJ,EAAiB;AACf;AACA,QAAII,cAAc7G,IAAIwG,MAAJ,CAAWC,YAAY,CAAZ,EAAejC,MAA1B,CAAlB;AACAoC,gBAAYH,YAAY,CAAZ,MAAmB,GAAnB,GAAyBN,aAAzB,GAAyCA,gBAAgB,GAArE;AACA,QAAIW,WAAWD,YAAYE,OAAZ,CAAoB,GAApB,CAAf;AACA,QAAIC,OAAOF,aAAa,CAAC,CAAd,GAAkBD,WAAlB,GAAgCA,YAAYL,MAAZ,CAAmB,CAAnB,EAAsBM,QAAtB,CAA3C;AACA,QAAIG,OAAOH,aAAa,CAAC,CAAd,GAAkB,EAAlB,GAAuBD,YAAYL,MAAZ,CAAmBM,QAAnB,CAAlC,CANe,CAQf;AACA;AACA;;AACAE,WAAOA,KAAKE,OAAL,CAAa,KAAb,EAAoB,MAAMC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,EAA3B,CAA1B,CAAP;AAEA,WAAOT,YAAY,KAAZ,GAAoBI,IAApB,GAA2BC,IAAlC;AACD,GAdD,MAcO,IAAIN,YAAJ,EAAkB;AACvBC,gBAAY,CAACD,aAAa,CAAb,CAAD,GAAmBR,aAAnB,GAAmCA,gBAAgB,GAA/D;AACA,QAAImB,eAAetH,IAAIwG,MAAJ,CAAWG,aAAa,CAAb,EAAgBnC,MAA3B,CAAnB;AACAxE,UAAM4G,YAAY,KAAZ,GAAoBU,YAA1B;AACD,GA9BgD,CAgCjD;;;AACA,MAAItH,IAAI+G,OAAJ,CAAY,KAAZ,MAAuB,CAAC,CAAxB,IAA6B,CAAC/G,IAAIqG,UAAJ,CAAe,GAAf,CAAlC,EAAuD;AACrDrG,UAAMmG,gBAAgB,KAAhB,GAAwBnG,GAA9B;AACD,GAnCgD,CAqCjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,QAAMsG,OAAOiB,sBAAP,CAA8BvH,GAA9B,CAAN;AAEA,MAAIA,IAAIwH,QAAJ,CAAa,GAAb,CAAJ,EAAuB,OAAOxH,MAAMoG,OAAb,CAAvB,KACK,OAAOpG,MAAM,GAAN,GAAYoG,OAAnB;AACN;;AAEM,SAAS3G,WAAT,CAAqBO,GAArB,EAA0B;AAC/B,SAAOkG,aAAalG,GAAb,EAAkB,MAAlB,EAA0B,QAA1B,CAAP;AACD;;AAEM,SAASN,cAAT,CAAwBM,GAAxB,EAA6B;AAClC,SAAOkG,aAAalG,GAAb,EAAkB,IAAlB,EAAwB,WAAxB,CAAP;AACD,C","file":"/packages/socket-stream-client.js","sourcesContent":["import {\n  toSockjsUrl,\n  toWebsocketUrl,\n} from \"./urls.js\";\n\nimport { StreamClientCommon } from \"./common.js\";\n\nexport class ClientStream extends StreamClientCommon {\n  // @param url {String} URL to Meteor app\n  //   \"http://subdomain.meteor.com/\" or \"/\" or\n  //   \"ddp+sockjs://foo-**.meteor.com/sockjs\"\n  constructor(url, options) {\n    super(options);\n\n    this._initCommon(this.options);\n\n    //// Constants\n\n    // how long between hearing heartbeat from the server until we declare\n    // the connection dead. heartbeats come every 45s (stream_server.js)\n    //\n    // NOTE: this is a older timeout mechanism. We now send heartbeats at\n    // the DDP level (https://github.com/meteor/meteor/pull/1865), and\n    // expect those timeouts to kill a non-responsive connection before\n    // this timeout fires. This is kept around for compatibility (when\n    // talking to a server that doesn't support DDP heartbeats) and can be\n    // removed later.\n    this.HEARTBEAT_TIMEOUT = 100 * 1000;\n\n    this.rawUrl = url;\n    this.socket = null;\n    this.lastError = null;\n\n    this.heartbeatTimer = null;\n\n    // Listen to global 'online' event if we are running in a browser.\n    // (IE8 does not support addEventListener)\n    if (typeof window !== 'undefined' && window.addEventListener)\n      window.addEventListener(\n        'online',\n        this._online.bind(this),\n        false /* useCapture. make FF3.6 happy. */\n      );\n\n    //// Kickoff!\n    this._launchConnection();\n  }\n\n  // data is a utf8 string. Data sent while not connected is dropped on\n  // the floor, and it is up the user of this API to retransmit lost\n  // messages on 'reset'\n  send(data) {\n    if (this.currentStatus.connected) {\n      this.socket.send(data);\n    }\n  }\n\n  // Changes where this connection points\n  _changeUrl(url) {\n    this.rawUrl = url;\n  }\n\n  _connected() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n\n    if (this.currentStatus.connected) {\n      // already connected. do nothing. this probably shouldn't happen.\n      return;\n    }\n\n    // update status\n    this.currentStatus.status = 'connected';\n    this.currentStatus.connected = true;\n    this.currentStatus.retryCount = 0;\n    this.statusChanged();\n\n    // fire resets. This must come after status change so that clients\n    // can call send from within a reset callback.\n    this.forEachCallback('reset', callback => {\n      callback();\n    });\n  }\n\n  _cleanup(maybeError) {\n    this._clearConnectionAndHeartbeatTimers();\n    if (this.socket) {\n      this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};\n      this.socket.close();\n      this.socket = null;\n    }\n\n    this.forEachCallback('disconnect', callback => {\n      callback(maybeError);\n    });\n  }\n\n  _clearConnectionAndHeartbeatTimers() {\n    if (this.connectionTimer) {\n      clearTimeout(this.connectionTimer);\n      this.connectionTimer = null;\n    }\n    if (this.heartbeatTimer) {\n      clearTimeout(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  _heartbeat_timeout() {\n    console.log('Connection timeout. No sockjs heartbeat received.');\n    this._lostConnection(new this.ConnectionError(\"Heartbeat timed out\"));\n  }\n\n  _heartbeat_received() {\n    // If we've already permanently shut down this stream, the timeout is\n    // already cleared, and we don't need to set it again.\n    if (this._forcedToDisconnect) return;\n    if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);\n    this.heartbeatTimer = setTimeout(\n      this._heartbeat_timeout.bind(this),\n      this.HEARTBEAT_TIMEOUT\n    );\n  }\n\n  _sockjsProtocolsWhitelist() {\n    // only allow polling protocols. no streaming.  streaming\n    // makes safari spin.\n    var protocolsWhitelist = [\n      'xdr-polling',\n      'xhr-polling',\n      'iframe-xhr-polling',\n      'jsonp-polling'\n    ];\n\n    // iOS 4 and 5 and below crash when using websockets over certain\n    // proxies. this seems to be resolved with iOS 6. eg\n    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.\n    //\n    // iOS <4 doesn't support websockets at all so sockjs will just\n    // immediately fall back to http\n    var noWebsockets =\n      navigator &&\n      /iPhone|iPad|iPod/.test(navigator.userAgent) &&\n      /OS 4_|OS 5_/.test(navigator.userAgent);\n\n    if (!noWebsockets)\n      protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);\n\n    return protocolsWhitelist;\n  }\n\n  _launchConnection() {\n    this._cleanup(); // cleanup the old socket, if there was one.\n\n    var options = {\n      protocols_whitelist: this._sockjsProtocolsWhitelist(),\n      ...this.options._sockjsOptions\n    };\n\n    const hasSockJS = typeof SockJS === \"function\";\n\n    this.socket = hasSockJS\n      // Convert raw URL to SockJS URL each time we open a connection, so\n      // that we can connect to random hostnames and get around browser\n      // per-host connection limits.\n      ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options)\n      : new WebSocket(toWebsocketUrl(this.rawUrl));\n\n    this.socket.onopen = data => {\n      this.lastError = null;\n      this._connected();\n    };\n\n    this.socket.onmessage = data => {\n      this.lastError = null;\n      this._heartbeat_received();\n      if (this.currentStatus.connected) {\n        this.forEachCallback('message', callback => {\n          callback(data.data);\n        });\n      }\n    };\n\n    this.socket.onclose = () => {\n      Promise.resolve(\n        // If the socket is closing because there was an error, and we\n        // didn't load SockJS before, try loading it dynamically before\n        // retrying the connection.\n        this.lastError &&\n        ! hasSockJS &&\n        import(\"./sockjs-0.3.4.js\")\n      ).done(() => {\n        this._lostConnection();\n      });\n    };\n\n    this.socket.onerror = error => {\n      const { lastError } = this;\n      this.lastError = error;\n      if (lastError) return;\n      console.log(\n        'stream error',\n        error,\n        new Date().toDateString()\n      );\n    };\n\n    this.socket.onheartbeat = () => {\n      this.lastError = null;\n      this._heartbeat_received();\n    };\n\n    if (this.connectionTimer) clearTimeout(this.connectionTimer);\n    this.connectionTimer = setTimeout(() => {\n      this._lostConnection(\n        new this.ConnectionError(\"DDP connection timed out\")\n      );\n    }, this.CONNECT_TIMEOUT);\n  }\n}\n","import { Retry } from 'meteor/retry';\n\nconst forcedReconnectError = new Error(\"forced reconnect\");\n\nexport class StreamClientCommon {\n  constructor(options) {\n    this.options = {\n      retry: true,\n      ...(options || null),\n    };\n\n    this.ConnectionError =\n      options && options.ConnectionError || Error;\n  }\n\n  // Register for callbacks.\n  on(name, callback) {\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')\n      throw new Error('unknown event type: ' + name);\n\n    if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];\n    this.eventCallbacks[name].push(callback);\n  }\n\n  forEachCallback(name, cb) {\n    if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {\n      return;\n    }\n\n    this.eventCallbacks[name].forEach(cb);\n  }\n\n  _initCommon(options) {\n    options = options || Object.create(null);\n\n    //// Constants\n\n    // how long to wait until we declare the connection attempt\n    // failed.\n    this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n\n    this.eventCallbacks = Object.create(null); // name -> [callback]\n\n    this._forcedToDisconnect = false;\n\n    //// Reactive status\n    this.currentStatus = {\n      status: 'connecting',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (Package.tracker) {\n      this.statusListeners = new Package.tracker.Tracker.Dependency();\n    }\n\n    this.statusChanged = () => {\n      if (this.statusListeners) {\n        this.statusListeners.changed();\n      }\n    };\n\n    //// Retry logic\n    this._retry = new Retry();\n    this.connectionTimer = null;\n  }\n\n  // Trigger a reconnect.\n  reconnect(options) {\n    options = options || Object.create(null);\n\n    if (options.url) {\n      this._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      this.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (this.currentStatus.connected) {\n      if (options._force || options.url) {\n        this._lostConnection(forcedReconnectError);\n      }\n      return;\n    }\n\n    // if we're mid-connection, stop it.\n    if (this.currentStatus.status === 'connecting') {\n      // Pretend it's a clean close.\n      this._lostConnection();\n    }\n\n    this._retry.clear();\n    this.currentStatus.retryCount -= 1; // don't count manual retries\n    this._retryNow();\n  }\n\n  disconnect(options) {\n    options = options || Object.create(null);\n\n    // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n    if (this._forcedToDisconnect) return;\n\n    // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n    if (options._permanent) {\n      this._forcedToDisconnect = true;\n    }\n\n    this._cleanup();\n    this._retry.clear();\n\n    this.currentStatus = {\n      status: options._permanent ? 'failed' : 'offline',\n      connected: false,\n      retryCount: 0\n    };\n\n    if (options._permanent && options._error)\n      this.currentStatus.reason = options._error;\n\n    this.statusChanged();\n  }\n\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection(maybeError) {\n    this._cleanup(maybeError);\n    this._retryLater(maybeError); // sets status. no need to do it here.\n  }\n\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online() {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != 'offline') this.reconnect();\n  }\n\n  _retryLater(maybeError) {\n    var timeout = 0;\n    if (this.options.retry ||\n        maybeError === forcedReconnectError) {\n      timeout = this._retry.retryLater(\n        this.currentStatus.retryCount,\n        this._retryNow.bind(this)\n      );\n      this.currentStatus.status = 'waiting';\n      this.currentStatus.retryTime = new Date().getTime() + timeout;\n    } else {\n      this.currentStatus.status = 'failed';\n      delete this.currentStatus.retryTime;\n    }\n\n    this.currentStatus.connected = false;\n    this.statusChanged();\n  }\n\n  _retryNow() {\n    if (this._forcedToDisconnect) return;\n\n    this.currentStatus.retryCount += 1;\n    this.currentStatus.status = 'connecting';\n    this.currentStatus.connected = false;\n    delete this.currentStatus.retryTime;\n    this.statusChanged();\n\n    this._launchConnection();\n  }\n\n  // Get current status. Reactive.\n  status() {\n    if (this.statusListeners) {\n      this.statusListeners.depend();\n    }\n    return this.currentStatus;\n  }\n}\n","// @param url {String} URL to Meteor app, eg:\n//   \"/\" or \"madewith.meteor.com\" or \"https://foo.meteor.com\"\n//   or \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.\n// for scheme \"http\" and subPath \"sockjs\"\n//   \"http://subdomain.meteor.com/sockjs\" or \"/sockjs\"\n//   or \"https://ddp--1234-foo.meteor.com/sockjs\"\nfunction translateUrl(url, newSchemeBase, subPath) {\n  if (!newSchemeBase) {\n    newSchemeBase = 'http';\n  }\n\n  if (subPath !== \"sockjs\" && url.startsWith(\"/\")) {\n    url = Meteor.absoluteUrl(url.substr(1));\n  }\n\n  var ddpUrlMatch = url.match(/^ddp(i?)\\+sockjs:\\/\\//);\n  var httpUrlMatch = url.match(/^http(s?):\\/\\//);\n  var newScheme;\n  if (ddpUrlMatch) {\n    // Remove scheme and split off the host.\n    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);\n    newScheme = ddpUrlMatch[1] === 'i' ? newSchemeBase : newSchemeBase + 's';\n    var slashPos = urlAfterDDP.indexOf('/');\n    var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);\n    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);\n\n    // In the host (ONLY!), change '*' characters into random digits. This\n    // allows different stream connections to connect to different hostnames\n    // and avoid browser per-hostname connection limits.\n    host = host.replace(/\\*/g, () => Math.floor(Math.random() * 10));\n\n    return newScheme + '://' + host + rest;\n  } else if (httpUrlMatch) {\n    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + 's';\n    var urlAfterHttp = url.substr(httpUrlMatch[0].length);\n    url = newScheme + '://' + urlAfterHttp;\n  }\n\n  // Prefix FQDNs but not relative URLs\n  if (url.indexOf('://') === -1 && !url.startsWith('/')) {\n    url = newSchemeBase + '://' + url;\n  }\n\n  // XXX This is not what we should be doing: if I have a site\n  // deployed at \"/foo\", then DDP.connect(\"/\") should actually connect\n  // to \"/\", not to \"/foo\". \"/\" is an absolute path. (Contrast: if\n  // deployed at \"/foo\", it would be reasonable for DDP.connect(\"bar\")\n  // to connect to \"/foo/bar\").\n  //\n  // We should make this properly honor absolute paths rather than\n  // forcing the path to be relative to the site root. Simultaneously,\n  // we should set DDP_DEFAULT_CONNECTION_URL to include the site\n  // root. See also client_convenience.js #RationalizingRelativeDDPURLs\n  url = Meteor._relativeToSiteRootUrl(url);\n\n  if (url.endsWith('/')) return url + subPath;\n  else return url + '/' + subPath;\n}\n\nexport function toSockjsUrl(url) {\n  return translateUrl(url, 'http', 'sockjs');\n}\n\nexport function toWebsocketUrl(url) {\n  return translateUrl(url, 'ws', 'websocket');\n}\n"]}