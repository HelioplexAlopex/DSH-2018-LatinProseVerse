{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/jeff/stylometry/imports/api/stylometry.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/api/stylometry.js","filename":"/home/jeff/stylometry/imports/api/stylometry.js","passPerPreset":false,"envName":"development","cwd":"/home/jeff/stylometry","root":"/home/jeff/stylometry","generatorOpts":{"filename":"/home/jeff/stylometry/imports/api/stylometry.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/stylometry.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _readOnlyError2 = _interopRequireDefault(require(\"@babel/runtime/helpers/readOnlyError\"));\n\nmodule.export({\n  Stylo: function () {\n    return Stylo;\n  },\n  Author: function () {\n    return Author;\n  },\n  Authors: function () {\n    return Authors;\n  }\n});\nvar Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 0);\nvar tokenizer;\nmodule.watch(require(\"@knod/sbd\"), {\n  \"default\": function (v) {\n    tokenizer = v;\n  }\n}, 1);\nvar Stylo = new Mongo.Collection(\"stylo\");\nvar Author = new Mongo.Collection(\"author\");\nvar Authors = new Mongo.Collection(\"authors\");\nvar personalPronoun = [\"ego\", \"mei\", \"mihi\", \"me\", \"tu\", \"tui\", \"tibi\", \"te\", \"nos\", \"nostri\", \"nobis\", \"vos\", \"vestri\", \"vobis\", \"uos\", \"uestri\", \"uobis\", \"mi\", \"nostrum\", \"vestrum\", \"vostrum\", \"vostri\", \"uestrum\", \"uostrum\", \"uostri\", \"egoque\", \"meique\", \"mihique\", \"meque\", \"tuque\", \"tuique\", \"tibique\", \"teque\", \"nosque\", \"nostrique\", \"nobisque\", \"vosque\", \"vestrique\", \"vobisque\", \"uosque\", \"uestrique\", \"uobisque\", \"mique\", \"nostrumque\", \"vestrumque\", \"vostrumque\", \"vostrique\", \"uestrumque\", \"uostrumque\", \"uostrique\"];\nvar demonstrativePronoun = [\"hic\", \"hunc\", \"huius\", \"huic\", \"hoc\", \"haec\", \"hanc\", \"hac\", \"hi\", \"hos\", \"horum\", \"his\", \"hae\", \"has\", \"harum\", \"ho\", \"ha\", \"ille\", \"illum\", \"illius\", \"illi\", \"illo\", \"illa\", \"illam\", \"illud\", \"illos\", \"illorum\", \"illis\", \"illas\", \"illarum\", \"illae\", \"is\", \"eum\", \"eius\", \"ei\", \"eo\", \"ea\", \"eam\", \"id\", \"ii\", \"eos\", \"eorum\", \"eis\", \"iis\", \"eae\", \"eas\", \"earum\", \"illic\", \"illaec\", \"illuc\", \"illic\", \"illoc\", \"illunc\", \"illanc\", \"illac\", \"hicque\", \"huncque\", \"huiusque\", \"huicque\", \"hocque\", \"haecque\", \"hancque\", \"hacque\", \"hique\", \"hosque\", \"horumque\", \"hisque\", \"haeque\", \"hasque\", \"harumque\", \"hoque\", \"haque\", \"illeque\", \"illumque\", \"illiusque\", \"illique\", \"illoque\", \"illaque\", \"illamque\", \"illudque\", \"illosque\", \"illorumque\", \"illisque\", \"illasque\", \"illarumque\", \"illaeque\", \"isque\", \"eumque\", \"eiusque\", \"eique\", \"eoque\", \"eaque\", \"eamque\", \"idque\", \"iique\", \"eosque\", \"eorumque\", \"eisque\", \"iisque\", \"eaeque\", \"easque\", \"earumque\", \"illicque\", \"illaecque\", \"illucque\", \"illicque\", \"illocque\", \"illuncque\", \"illancque\", \"illacque\"];\nvar reflexivePronoun = [\"se\", \"sibi\", \"sese\", \"sui\", \"seque\", \"sibique\", \"seseque\", \"suique\"];\nvar conditionalClauses = [\"si\", \"nisi\", \"quodsi\", \"sin\", \"dummodo\"];\nvar conjunctions = [\"et\", \"atque\", \"ac\", \"aut\", \"vel\", \"uel\", \"at\", \"autem\", \"sed\", \"postquam\", \"ast\", \"donec\", \"dum\", \"dummodo\", \"enim\", \"etiam\", \"etiamtum\", \"etiamtunc\", \"etenim\", \"veruntamen\", \"ueruntamen\", \"uerumtamen\", \"verumtamen\", \"utrumnam\", \"set\", \"quocirca\", \"quia\", \"quamquam\", \"quanquam\", \"nam\", \"namque\", \"nanque\", \"nempe\", \"dumque\", \"etiamque\", \"quiaque\"];\nvar conjunctionsIn = [\"que\"];\nvar idem = [\"idem\", \"eundem\", \"eiusdem\", \"eidem\", \"eodem\", \"eadem\", \"eandem\", \"iidem\", \"eosdem\", \"eorundem\", \"eisdem\", \"iisdem\", \"eaedem\", \"eedem\", \"easdem\", \"earumdem\", \"isdem\", \"isdemque\", \"idemque\", \"eundemque\", \"eiusdemque\", \"eidemque\", \"eodemque\", \"eademque\", \"eandemque\", \"iidemque\", \"eosdemque\", \"eorundemque\", \"eisdemque\", \"iisdemque\", \"eaedemque\", \"easdemque\", \"earundemque\"];\nvar ipse = [\"ipse\", \"ipsum\", \"ipsius\", \"ipsi\", \"ipso\", \"ipsa\", \"ipsam\", \"ipsos\", \"ipsorum\", \"ipsas\", \"ipsarum\", \"ipseque\", \"ipsumque\", \"ipsiusque\", \"ipsique\", \"ipsoque\", \"ipsaque\", \"ipsamque\", \"ipsosque\", \"ipsorumque\", \"ipsasque\", \"ipsarumque\"];\nvar indef = [\"quidam\", \"quendam\", \"cuiusdam\", \"cuidam\", \"quodam\", \"quedam\", \"quandam\", \"quodam\", \"quoddam\", \"quosdam\", \"quorundam\", \"quibusdam\", \"quasdam\", \"quarundam\"];\nvar iste = [\"iste\", \"istum\", \"istius\", \"isti\", \"isto\", \"ista\", \"istam\", \"istud\", \"istos\", \"istorum\", \"istis\", \"istas\", \"istarum\", \"iste\", \"istum\", \"istius\", \"isti\", \"isto\", \"ista\", \"istam\", \"istud\", \"istos\", \"istorum\", \"istis\", \"istas\", \"istarum\", \"isteque\", \"istumque\", \"istiusque\", \"istique\", \"istoque\", \"istaque\", \"istamque\", \"istudque\", \"istosque\", \"istorumque\", \"istisque\", \"istasque\", \"istarumque\"];\nvar quidam = [\"quidam\", \"quendam\", \"cuiusdam\", \"cuidam\", \"quodam\", \"quaedam\", \"quandam\", \"quodam\", \"quoddam\", \"quosdam\", \"quorundam\", \"quibusdam\", \"quasdam\", \"quarundam\", \"quiddam\", \"quoddam\", \"quadam\", \"quidamque\", \"quendamque\", \"cuiusdamque\", \"cuidamque\", \"quodamque\", \"quaedamque\", \"quandamque\", \"quodamque\", \"quoddamque\", \"quosdamque\", \"quorundamque\", \"quibusdamque\", \"quasdamque\", \"quarundamque\", \"quiddamque\", \"quoddamque\", \"quadamque\"];\nvar consonant = [\"b\", \"c\", \"d\", \"f\", \"g\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\nvar alius = [\"alius\", \"alium\", \"alii\", \"alio\", \"alia\", \"aliam\", \"aliud\", \"alios\", \"aliorum\", \"aliis\", \"aliae\", \"alias\", \"aliarum\", \"aliusque\", \"aliumque\", \"aliique\", \"alioque\", \"aliaque\", \"aliamque\", \"aliudque\", \"aliosque\", \"aliorumque\", \"aliisque\", \"aliaeque\", \"aliasque\", \"aliarumque\"];\nvar priu = [\"priusquam\", \"prius quam\"];\nvar anteq = [\"antequam\", \"ante quam\"];\nvar quom = [\"quominus\", \"quo minus\"];\nvar dum = [\"dum\", \"dumque\"];\nvar quin = [\"quin\"];\nvar o = [\"o\"];\nvar atque = [\"atque\"];\nvar ut = [\"ut\", \"utei\", \"utque\"];\nvar gerund = [\"ndum\", \"ndus\", \"ndorum\", \"ndarum\", \"ndumque\", \"ndusque\", \"ndorumque\", \"ndarumque\"];\nvar vocatives = [\"e\", \"i\", \"a\", \"u\", \"ae\", \"es\", \"um\", \"us\"];\nvar prepositions = [\"ab\", \"abs\", \"e\", \"ex\", \"apud\", \"de\", \"cis\", \"erga\", \"inter\", \"ob\", \"penes\", \"per\", \"praeter\", \"propter\", \"trans\", \"absque\", \"pro\", \"tenus\", \"sub\", \"aque\", \"abque\", \"eque\", \"exque\", \"apudque\", \"deque\", \"cisque\", \"ergaque\", \"interque\", \"obque\", \"penesque\", \"perque\", \"praeterque\", \"propterque\", \"transque\", \"proque\", \"tenusque\", \"subque\"];\nvar cumClauses = [\"a\", \"e\", \"i\", \"o\", \"u\", \"is\", \"ibus\", \"ebus\", \"obus\", \"ubus\"];\nvar relatives = [\"qui\", \"cuius\", \"cui\", \"quem\", \"quo\", \"quae\", \"quam\", \"qua\", \"quod\", \"quorum\", \"quibus\", \"quos\", \"quarum\", \"quas\"];\nvar abbreviations = [\"Caes\", \"Iul\", \"Plur\", \"Aug\", \"Prid\", \"Id\", \"Kal\", \"Kl\", \"Non\", \"Med\", \"Ex\", \"In\", \"Ian\", \"Feb\", \"Febr\", \"Mart\", \"Apr\", \"Iun\", \"Mai\", \"Nov\", \"Oct\", \"Sept\", \"Dec\", \"Fin\", \"Cos\", \"Coss\", \"Pr\", \"Sext\", \"Ann\", \"Sal\", \"Imp\", \"Tr\", \"Pl\", \"Leg\", \"Aed\", \"Cens\", \"Agr\", \"Ant\", \"Aur\", \"Cn\", \"Scrib\", \"Fab\", \"Pom\", \"Quir\", \"Pup\", \"An\", \"Ter\", \"Op\", \"Germ\", \"Gn\", \"Ap\", \"M’\", \"Mai\", \"Mam\", \"Men\", \"Min\", \"Oct\", \"Opet\", \"Pro\", \"Quint\", \"Quinct\", \"Sec\", \"Ser\", \"Sert\", \"Serv\", \"Seq\", \"Sex\", \"Sp\", \"St\", \"Ti\", \"Tib\", \"Vol\", \"Vop\", \"Aem\", \"Aim\", \"Rom\", \"Pont\", \"Imp\", \"Max\", \"Coll\", \"Ob \", \"Lib\", \"Cir\", \"Ver\", \"III\", \"Eq\", \"eq\", \"I\", \"II\", \"III\", \"IIII\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"VIIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XVIIII\", \"XIX\", \"XX\", \"XXI\", \"XXII\", \"XXIII\", \"XXIIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"XXVIIII\", \"XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIIII\", \"XXXIV\", \"XXXV\", \"XXXVI\", \"XXXVII\", \"XXXVIII\", \"XXXVIIII\", \"XXXIX\", \"XXXX\", \"XL\", \"XLI\", \"XLII\", \"XLIII\", \"XLIIII\", \"XLIV\", \"XLV\", \"XLVI\", \"XLVII\", \"XLVIII\", \"XLVIIII\", \"XLIX\", \"L\", \"LI\", \"LII\", \"LIII\", \"LIIII\", \"LIV\", \"LV\", \"LVI\", \"LVII\", \"LVIII\", \"LVIIII\", \"LIX\", \"LX\", \"LXI\", \"LXII\", \"LXIII\", \"LXIIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"LXVIIII\", \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIIII\", \"LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\", \"LXXVIII\", \"LXXVIIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\", \"LXXXIIII\", \"LXXXIV\", \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXVIIII\", \"LXXXIX\", \"LXXXX\", \"XC\", \"XCI\", \"XCII\", \"XCIII\", \"XCIIII\", \"XCIV\", \"XCV\", \"XCVI\", \"XCVII\", \"XCVIII\", \"XCVIIII\", \"XCIX\", \"C\", \"CC\", \"CCC\", \"CCCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"DCCCC\", \"CM\", \"M\", \"MM\", \"MMM\", \"MMMM\"];\n\nvar occurences = function (str, words) {\n  var end = \"\\\\b\";\n  var regex = end + \"(\" + words.join(\"|\") + \")\" + end;\n  var re = new RegExp(regex, \"gi\");\n\n  if (str.match(re)) {\n    return str.match(re).length;\n  } else {\n    return 0;\n  }\n};\n\nvar multiOccurence = function (str, listArray) {\n  str = str.toLowerCase().split(\" \");\n  var count = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    if (listArray.includes(str[i]) || str[i].endsWith(\"que\")) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nvar startWith = function (str, list) {\n  for (var i = 0; i < list.length; i++) {\n    if (str.startsWith(list[i])) return true;\n  }\n};\n\nvar endWith = function (str, list) {\n  var count = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    if (str.endsWith(list[i])) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nvar interrogative = function (str) {\n  var count = 0;\n  str = str.split(\" \");\n  var l = str.length;\n\n  for (var i = 0; i < l; i++) {\n    if (str[i].indexOf(\"?\") != -1) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nvar countWords = function (str) {\n  str = str.replace();\n  return str.trim().split(/\\s+/).length;\n};\n\nvar sigFig = function (num) {\n  if (num) {\n    return Number(num.toFixed(5));\n  } else {\n    return 0;\n  }\n};\n\nfunction startf(a1, str) {\n  var consonant = [\"b\", \"c\", \"d\", \"f\", \"g\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  var count = 0;\n  var string = a1.toLowerCase().split(\" \");\n  var l = string.length;\n\n  for (var i = 0; i < l; i++) {\n    var p = (i + 1) % l;\n\n    if (string[i] === \"atque\" && startWith(string[p], consonant)) {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n\nvar charCount = function (str) {\n  str = str.replace(/[^a-zA-Z0-9]+/gi, \"\").replace(/\\s/g, \"\");\n  return str.length;\n};\n\nvar multiSplit = function (str, delimeters) {\n  var result = [str];\n  if (typeof delimeters == \"string\") delimeters = [delimeters];\n\n  while (delimeters.length > 0) {\n    for (var i = 0; i < result.length; i++) {\n      var tempSplit = result[i].split(delimeters[0]);\n      result = ((0, _readOnlyError2.default)(\"result\"), result.slice(0, i).concat(tempSplit).concat(result.slice(i + 1)));\n    }\n\n    delimeters.shift();\n  }\n\n  return result;\n};\n\nvar relative = function (a1, list) {\n  function findall(regex_pattern, string_) {\n    var output_list = [];\n\n    while (true) {\n      var a_match = regex_pattern.exec(string_);\n\n      if (a_match) {\n        delete a_match.input;\n        output_list.push(a_match);\n      } else {\n        break;\n      }\n    }\n\n    return output_list;\n  }\n\n  function regexIndexOf(text, reg, y) {\n    var ree = new RegExp(\"\\\\b(\" + reg + \")\\\\b\", \"i\");\n    var indexInSuffix;\n\n    if (reg === \".\" || reg === \",\" || reg === \":\" || reg === \"!\") {\n      indexInSuffix = text.indexOf(reg, y);\n    } else {\n      ifIndex = text.slice(y).match(ree);\n\n      if (ifIndex) {\n        indexInSuffix = ifIndex.index + y;\n      } else {\n        indexInSuffix = -1;\n      }\n    }\n\n    return indexInSuffix;\n  }\n\n  var count = 0;\n  var sentCount = 0;\n  var ttArray = 0;\n  var stringCon = [];\n  var relativeArray = [];\n  var l = a1.length;\n\n  var _loop = function (i) {\n    var occ = occurences(a1[i], list);\n\n    if (a1[i].indexOf(\"!\") > -1 || a1[i].indexOf(\".\") > -1) {\n      sentCount += 1;\n    }\n\n    if (a1[i].indexOf(\"!\") > -1 && occ >= 1 || a1[i].indexOf(\".\") > -1 && occ >= 1) {\n      (function () {\n        var re = new RegExp(\"\\\\b(\" + list.join(\"|\") + \")\\\\b\", \"gi\");\n        var allArray = findall(re, a1[i]);\n        var mergeArray = list.concat([\",\", \":\", \".\", \"!\", \";\"]);\n\n        var _loop2 = function (d) {\n          var foundIndexes = mergeArray.map(function (x) {\n            return regexIndexOf(a1[i], x, allArray[d].index + 1);\n          }).filter(function (x) {\n            return x !== -1 && x !== allArray[d].index;\n          });\n          foundIndexes = Math.min.apply(Math, (0, _toConsumableArray2.default)(foundIndexes));\n          var str = a1[i].slice(allArray[d].index, foundIndexes);\n          relativeArray.push(str);\n        };\n\n        for (var d = 0; d < allArray.length; d++) {\n          _loop2(d);\n        }\n\n        count += 1;\n      })();\n    }\n  };\n\n  for (var i = 0; i < l; i++) {\n    _loop(i);\n  }\n\n  var finalString = relativeArray.toString();\n  var stringCount = finalString.replace(/[^a-zA-Z0-9]+/gi, \"\").replace(/\\s/g, \"\");\n  return {\n    relative: count / sentCount,\n    mean: stringCount.length / relativeArray.length\n  };\n};\n\nvar removePunct = function (str) {\n  return str.replace(/[^a-zA-Z0-9\\n\\r]+/gi, \" \");\n};\n\nvar endf = function (string, str, a2) {\n  var count = 0;\n  string = removePunct(string);\n  string = string.split(\" \");\n\n  for (var i = 0; i < string.length; i++) {\n    var p = (i + 1) % string.length;\n    var first = string[i].toLowerCase();\n    var second = string[p];\n\n    if (first === \"o\" && endWith(second, a2)) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nvar cumClause = function (a1, a2) {\n  a1 = removePunct(a1);\n  var str = \"cum\";\n  var count = 0;\n  var string = a1.toLowerCase().split(\" \");\n  var l = string.length;\n\n  for (var i = 0; i < l; i++) {\n    var p = (i + 1) % l;\n\n    if (string[i] === str && endWith(string[p], a2) !== 1) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nvar endGerund = function (a1, a2) {\n  var count = 0;\n  a1 = removePunct(a1);\n  var string = a1.toLowerCase().split(\" \");\n  var l = string.length;\n\n  for (var i = 0; i < l; i++) {\n    if (endWith(string[i], a2) && string[i] !== \"nondum\") {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nvar superlatives = function (str) {\n  var count = 0;\n  str = str.toLowerCase();\n  str = str.split(\" \");\n  var substring = \"issim\";\n  var l = str.length;\n\n  for (var i = 0; i < l; i++) {\n    if (str[i].includes(substring)) {\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nvar topNgrams = function (str) {\n  function updateFrequency(frequencies, word) {\n    frequencies[word] = (frequencies[word] || 0) + 1;\n    return frequencies;\n  }\n\n  var n = 5;\n  var words = str.replace(/[^a-zA-Z0-9]+/gi, \" \").trim().split(/\\s+/);\n  var frequencies = {};\n  var orderedFrequencies = [];\n  var word;\n  var frequency;\n  var result = [];\n  words.reduce(updateFrequency, frequencies);\n\n  for (word in meteorBabelHelpers.sanitizeForInObject(frequencies)) {\n    frequency = frequencies[word];\n    (orderedFrequencies[frequency] = orderedFrequencies[frequency] || []).push(word);\n  }\n\n  while (result.length < n && orderedFrequencies.length) {\n    (words = orderedFrequencies.pop()) && (result = result.concat(words));\n  }\n\n  return result.slice(0, n);\n};\n\nvar meanSentence = function (a1) {\n  var five = 0;\n\n  for (var de = 0; de < a1.length; de++) {\n    var strip = a1[de].replace(/[^a-zA-Z0-9]+/gi, \"\").trim();\n    five += strip.length;\n  }\n\n  return five / a1.length;\n};\n\nvar listO = [{\n  feature: \"p1\",\n  list: \"personalPronoun\"\n}, {\n  feature: \"p2\",\n  list: \"demonstrativePronoun\"\n}, {\n  feature: \"p3\",\n  list: \"quidam\"\n}, {\n  feature: \"p4\",\n  list: \"reflexivePronoun\"\n}, {\n  feature: \"p5\",\n  list: \"iste\"\n}, {\n  feature: \"n1\",\n  list: \"alius\"\n}, {\n  feature: \"n2\",\n  list: \"ipse\"\n}, {\n  feature: \"n3\",\n  list: \"idem\"\n}, {\n  feature: \"s6\",\n  list: \"priu\"\n}, {\n  feature: \"s5\",\n  list: \"anteq\"\n}, {\n  feature: \"s4\",\n  list: \"quom\"\n}, {\n  feature: \"s7\",\n  list: \"dum\"\n}, {\n  feature: \"s3\",\n  list: \"quin\"\n}, {\n  feature: \"m4\",\n  list: \"ut\"\n}, {\n  feature: \"s1\",\n  list: \"conditionalClauses\"\n}, {\n  feature: \"m7\",\n  list: \"prepositions\"\n}];\nvar listF = [{\n  feature: \"m1\",\n  list: \"\",\n  name: \"interrogative(book)\"\n}, {\n  feature: \"m3\",\n  list: \"\",\n  name: \"superlatives(book)\"\n}, {\n  feature: \"c2\",\n  name: \"startf(book, atque)\"\n}, {\n  feature: \"s8\",\n  list: \"relatives\",\n  name: \"relative(sentences, relatives)\"\n}, {\n  feature: \"m5\",\n  name: \"endGerund(book, gerund)\"\n}, {\n  feature: \"s2\",\n  name: \"cumClause(book, cumClauses)\"\n}];\nvar listC = [{\n  feature: \"c1\",\n  name: \"multiOccurence(ngramRemoved, conjunctions, conjunctionsIn)\"\n}, {\n  feature: \"m2\",\n  name: \"endf(ngramRemoved, o, vocatives)\"\n}];\nMeteor.methods({\n  stylometryf: function () {\n    function _callee(data, options) {\n      var l, result, i, author, text, sbook, query, tempCursor, _tempCursor, _tempCursor2, fieldName, _iterator, _isArray, _i, _ref, _doc, gramr, candidate, featureArray, slice, _i2, book, ngramRemoved, sentences, _words, characters, k, b, value, _value, m, _b, d, _value2, _value3, _value4, _value5, _value6, _i3, _b2, _d, _value7, _value8;\n\n      return _regenerator.default.async(function () {\n        function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                l = data.author.length;\n                result = [];\n                i = 0;\n\n              case 3:\n                if (!(i < l)) {\n                  _context.next = 37;\n                  break;\n                }\n\n                author = data.author[i];\n                text = data.text[i];\n                sbook = data.book[i];\n                query = {\n                  author: author\n                };\n\n                if (text) {\n                  query.text = text;\n                }\n\n                if (sbook) {\n                  query.book = sbook;\n                }\n\n                tempCursor = void 0;\n\n                if (options.selectAll) {\n                  _tempCursor = Stylo.find().fetch();\n                  console.log(_tempCursor);\n                } else {\n                  _tempCursor2 = Stylo.find(query).fetch();\n                }\n\n                fieldName = \"ngram\";\n                _iterator = tempCursor, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();\n\n              case 14:\n                if (!_isArray) {\n                  _context.next = 20;\n                  break;\n                }\n\n                if (!(_i >= _iterator.length)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                return _context.abrupt(\"break\", 34);\n\n              case 17:\n                _ref = _iterator[_i++];\n                _context.next = 24;\n                break;\n\n              case 20:\n                _i = _iterator.next();\n\n                if (!_i.done) {\n                  _context.next = 23;\n                  break;\n                }\n\n                return _context.abrupt(\"break\", 34);\n\n              case 23:\n                _ref = _i.value;\n\n              case 24:\n                _doc = _ref;\n                gramr = {};\n                candidate = _doc;\n                featureArray = options.feature;\n                slice = fieldName.split(\".\");\n\n                for (_i2 = 0; _i2 < slice.length; _i2++) {\n                  candidate = candidate[slice[_i2]];\n                }\n\n                if (candidate) {\n                  book = _doc.ngram;\n                  ngramRemoved = book.replace(/[“”\";:&,\\.\\/?\\\\-]/g, \"\").trim();\n                  sentences = tokenizer.sentences(_doc.ngram, {\n                    abbreviations: abbreviations\n                  });\n                  _words = Number(countWords(book));\n                  characters = Number(charCount(book));\n\n                  for (k = 0; k < listO.length; k++) {\n                    b = listO[k].feature;\n\n                    if (featureArray.includes(b)) {\n                      value = void 0;\n\n                      try {\n                        _value = occurences(book, module.runSetters(eval(listO[k].list)));\n                        gramr[b] = sigFig(_value / characters);\n                      } catch (error) {\n                        console.log(error);\n                      }\n                    }\n                  }\n\n                  for (m = 0; m < listF.length; m++) {\n                    _b = listF[m].feature;\n\n                    if (featureArray.includes(_b)) {\n                      d = listF[m].name;\n                      _value2 = void 0;\n\n                      try {\n                        if (listF[m].list === \"relatives\") {\n                          _value3 = module.runSetters(eval(d));\n                          gramr.s8 = sigFig(_value3.relative);\n                          gramr.s9 = sigFig(_value3.mean);\n                        } else if (listF[m].feature === \"m8\") {\n                          _value4 = module.runSetters(eval(d));\n                          gramr[_b] = _value4;\n                        } else if (listF[m].list !== \"\") {\n                          _value5 = module.runSetters(eval(d));\n                          gramr[_b] = sigFig(_value5 / characters);\n                        } else {\n                          _value6 = module.runSetters(eval(d));\n                          gramr[_b] = sigFig(_value6 / characters);\n                        }\n                      } catch (error) {\n                        console.log(error);\n                      }\n                    }\n                  }\n\n                  for (_i3 = 0; _i3 < listC.length; _i3++) {\n                    _b2 = listC[_i3].feature;\n\n                    if (featureArray.includes(_b2)) {\n                      _d = listC[_i3].name;\n                      _value7 = void 0;\n\n                      try {\n                        _value8 = module.runSetters(eval(_d));\n                        gramr[_b2] = sigFig(_value8 / characters);\n                      } catch (error) {\n                        console.log(error);\n                      }\n                    }\n                  }\n\n                  if (sentences.length <= 1) {\n                    gramr.m6 = 1;\n                  } else {\n                    gramr.m6 = sigFig(meanSentence(sentences));\n                  }\n\n                  gramr.characters = characters.toLocaleString();\n                  gramr.words = _words.toLocaleString();\n\n                  if (_doc.book) {\n                    gramr.name = _doc.author + \" \" + _doc.text + \" \" + _doc.book;\n                  } else if (_doc.text) {\n                    gramr.name = _doc.author + \" \" + _doc.text;\n                  } else {\n                    gramr.name = _doc.author;\n                  }\n\n                  gramr.sentences = sentences.length;\n                  gramr.type = _doc.format;\n                }\n\n                result.push(gramr);\n\n              case 32:\n                _context.next = 14;\n                break;\n\n              case 34:\n                i++;\n                _context.next = 3;\n                break;\n\n              case 37:\n                return _context.abrupt(\"return\", result);\n\n              case 38:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }\n\n        return _callee$;\n      }(), null, this);\n    }\n\n    return _callee;\n  }(),\n  authors: function () {\n    var authorArray = Author.find().fetch().map(function (x) {\n      return x.author;\n    });\n    return (0, _toConsumableArray2.default)(new Set(authorArray));\n  },\n  texts: function (author) {\n    var textArray = Authors.find({\n      author: author\n    }, {\n      sort: {\n        _id: -1\n      }\n    }).fetch().map(function (x) {\n      return x.text;\n    });\n    return (0, _toConsumableArray2.default)(new Set(textArray));\n  },\n  books: function (author, text) {\n    var bookArray = Authors.find({\n      author: author,\n      text: text\n    }, {\n      sort: {\n        _id: -1\n      }\n    }).fetch().map(function (x) {\n      return x.book;\n    });\n    return (0, _toConsumableArray2.default)(new Set(bookArray));\n  }\n});","map":{"version":3,"sources":["imports/api/stylometry.js"],"names":["module","export","Stylo","Author","Authors","Mongo","watch","require","v","tokenizer","Collection","personalPronoun","demonstrativePronoun","reflexivePronoun","conditionalClauses","conjunctions","conjunctionsIn","idem","ipse","indef","iste","quidam","consonant","alius","priu","anteq","quom","dum","quin","o","atque","ut","gerund","vocatives","prepositions","cumClauses","relatives","abbreviations","occurences","str","words","end","regex","join","re","RegExp","match","length","multiOccurence","listArray","toLowerCase","split","count","i","includes","endsWith","startWith","list","startsWith","endWith","interrogative","l","indexOf","countWords","replace","trim","sigFig","num","Number","toFixed","startf","a1","string","p","charCount","multiSplit","delimeters","result","tempSplit","slice","concat","shift","relative","findall","regex_pattern","string_","output_list","a_match","exec","input","push","regexIndexOf","text","reg","y","ree","indexInSuffix","ifIndex","index","sentCount","ttArray","stringCon","relativeArray","occ","allArray","mergeArray","d","foundIndexes","map","x","filter","Math","min","finalString","toString","stringCount","mean","removePunct","endf","a2","first","second","cumClause","endGerund","superlatives","substring","topNgrams","updateFrequency","frequencies","word","n","orderedFrequencies","frequency","reduce","pop","meanSentence","five","de","strip","listO","feature","listF","name","listC","Meteor","methods","stylometryf","data","options","author","sbook","book","query","tempCursor","selectAll","find","fetch","console","log","fieldName","doc","gramr","candidate","featureArray","ngram","ngramRemoved","sentences","characters","k","b","value","eval","error","m","s8","s9","m6","toLocaleString","type","format","authors","authorArray","Set","texts","textArray","sort","_id","books","bookArray"],"mappings":"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","sourcesContent":["import {Mongo} from \"meteor/mongo\";\nimport tokenizer from \"@knod/sbd\";\n\nexport const Stylo = new Mongo.Collection(\"stylo\");\nexport const Author = new Mongo.Collection(\"author\");\nexport const Authors = new Mongo.Collection(\"authors\");\n\nconst personalPronoun = [\n  \"ego\",\n  \"mei\",\n  \"mihi\",\n  \"me\",\n  \"tu\",\n  \"tui\",\n  \"tibi\",\n  \"te\",\n  \"nos\",\n  \"nostri\",\n  \"nobis\",\n  \"vos\",\n  \"vestri\",\n  \"vobis\",\n  \"uos\",\n  \"uestri\",\n  \"uobis\",\n  \"mi\",\n  \"nostrum\",\n  \"vestrum\",\n  \"vostrum\",\n  \"vostri\",\n  \"uestrum\",\n  \"uostrum\",\n  \"uostri\",\n  \"egoque\",\n  \"meique\",\n  \"mihique\",\n  \"meque\",\n  \"tuque\",\n  \"tuique\",\n  \"tibique\",\n  \"teque\",\n  \"nosque\",\n  \"nostrique\",\n  \"nobisque\",\n  \"vosque\",\n  \"vestrique\",\n  \"vobisque\",\n  \"uosque\",\n  \"uestrique\",\n  \"uobisque\",\n  \"mique\",\n  \"nostrumque\",\n  \"vestrumque\",\n  \"vostrumque\",\n  \"vostrique\",\n  \"uestrumque\",\n  \"uostrumque\",\n  \"uostrique\"\n];\n\nconst demonstrativePronoun = [\n  \"hic\",\n  \"hunc\",\n  \"huius\",\n  \"huic\",\n  \"hoc\",\n  \"haec\",\n  \"hanc\",\n  \"hac\",\n  \"hi\",\n  \"hos\",\n  \"horum\",\n  \"his\",\n  \"hae\",\n  \"has\",\n  \"harum\",\n  \"ho\",\n  \"ha\",\n  \"ille\",\n  \"illum\",\n  \"illius\",\n  \"illi\",\n  \"illo\",\n  \"illa\",\n  \"illam\",\n  \"illud\",\n  \"illos\",\n  \"illorum\",\n  \"illis\",\n  \"illas\",\n  \"illarum\",\n  \"illae\",\n  \"is\",\n  \"eum\",\n  \"eius\",\n  \"ei\",\n  \"eo\",\n  \"ea\",\n  \"eam\",\n  \"id\",\n  \"ii\",\n  \"eos\",\n  \"eorum\",\n  \"eis\",\n  \"iis\",\n  \"eae\",\n  \"eas\",\n  \"earum\",\n  \"illic\",\n  \"illaec\",\n  \"illuc\",\n  \"illic\",\n  \"illoc\",\n  \"illunc\",\n  \"illanc\",\n  \"illac\",\n  \"hicque\",\n  \"huncque\",\n  \"huiusque\",\n  \"huicque\",\n  \"hocque\",\n  \"haecque\",\n  \"hancque\",\n  \"hacque\",\n  \"hique\",\n  \"hosque\",\n  \"horumque\",\n  \"hisque\",\n  \"haeque\",\n  \"hasque\",\n  \"harumque\",\n  \"hoque\",\n  \"haque\",\n  \"illeque\",\n  \"illumque\",\n  \"illiusque\",\n  \"illique\",\n  \"illoque\",\n  \"illaque\",\n  \"illamque\",\n  \"illudque\",\n  \"illosque\",\n  \"illorumque\",\n  \"illisque\",\n  \"illasque\",\n  \"illarumque\",\n  \"illaeque\",\n  \"isque\",\n  \"eumque\",\n  \"eiusque\",\n  \"eique\",\n  \"eoque\",\n  \"eaque\",\n  \"eamque\",\n  \"idque\",\n  \"iique\",\n  \"eosque\",\n  \"eorumque\",\n  \"eisque\",\n  \"iisque\",\n  \"eaeque\",\n  \"easque\",\n  \"earumque\",\n  \"illicque\",\n  \"illaecque\",\n  \"illucque\",\n  \"illicque\",\n  \"illocque\",\n  \"illuncque\",\n  \"illancque\",\n  \"illacque\"\n];\n\nconst reflexivePronoun = [\"se\", \"sibi\", \"sese\", \"sui\", \"seque\", \"sibique\", \"seseque\", \"suique\"];\n\nconst conditionalClauses = [\"si\", \"nisi\", \"quodsi\", \"sin\", \"dummodo\"];\n\nconst conjunctions = [\n  \"et\",\n  \"atque\",\n  \"ac\",\n  \"aut\",\n  \"vel\",\n  \"uel\",\n  \"at\",\n  \"autem\",\n  \"sed\",\n  \"postquam\",\n  \"ast\",\n  \"donec\",\n  \"dum\",\n  \"dummodo\",\n  \"enim\",\n  \"etiam\",\n  \"etiamtum\",\n  \"etiamtunc\",\n  \"etenim\",\n  \"veruntamen\",\n  \"ueruntamen\",\n  \"uerumtamen\",\n  \"verumtamen\",\n  \"utrumnam\",\n  \"set\",\n  \"quocirca\",\n  \"quia\",\n  \"quamquam\",\n  \"quanquam\",\n  \"nam\",\n  \"namque\",\n  \"nanque\",\n  \"nempe\",\n  \"dumque\",\n  \"etiamque\",\n  \"quiaque\"\n];\n\nconst conjunctionsIn = [\"que\"];\n\nconst idem = [\n  \"idem\",\n  \"eundem\",\n  \"eiusdem\",\n  \"eidem\",\n  \"eodem\",\n  \"eadem\",\n  \"eandem\",\n  \"iidem\",\n  \"eosdem\",\n  \"eorundem\",\n  \"eisdem\",\n  \"iisdem\",\n  \"eaedem\",\n  \"eedem\",\n  \"easdem\",\n  \"earumdem\",\n  \"isdem\",\n  \"isdemque\",\n  \"idemque\",\n  \"eundemque\",\n  \"eiusdemque\",\n  \"eidemque\",\n  \"eodemque\",\n  \"eademque\",\n  \"eandemque\",\n  \"iidemque\",\n  \"eosdemque\",\n  \"eorundemque\",\n  \"eisdemque\",\n  \"iisdemque\",\n  \"eaedemque\",\n  \"easdemque\",\n  \"earundemque\"\n];\n\nconst ipse = [\n  \"ipse\",\n  \"ipsum\",\n  \"ipsius\",\n  \"ipsi\",\n  \"ipso\",\n  \"ipsa\",\n  \"ipsam\",\n  \"ipsos\",\n  \"ipsorum\",\n  \"ipsas\",\n  \"ipsarum\",\n  \"ipseque\",\n  \"ipsumque\",\n  \"ipsiusque\",\n  \"ipsique\",\n  \"ipsoque\",\n  \"ipsaque\",\n  \"ipsamque\",\n  \"ipsosque\",\n  \"ipsorumque\",\n  \"ipsasque\",\n  \"ipsarumque\"\n];\n\nconst indef = [\n  \"quidam\",\n  \"quendam\",\n  \"cuiusdam\",\n  \"cuidam\",\n  \"quodam\",\n  \"quedam\",\n  \"quandam\",\n  \"quodam\",\n  \"quoddam\",\n  \"quosdam\",\n  \"quorundam\",\n  \"quibusdam\",\n  \"quasdam\",\n  \"quarundam\"\n];\n\nconst iste = [\n  \"iste\",\n  \"istum\",\n  \"istius\",\n  \"isti\",\n  \"isto\",\n  \"ista\",\n  \"istam\",\n  \"istud\",\n  \"istos\",\n  \"istorum\",\n  \"istis\",\n  \"istas\",\n  \"istarum\",\n  \"iste\",\n  \"istum\",\n  \"istius\",\n  \"isti\",\n  \"isto\",\n  \"ista\",\n  \"istam\",\n  \"istud\",\n  \"istos\",\n  \"istorum\",\n  \"istis\",\n  \"istas\",\n  \"istarum\",\n  \"isteque\",\n  \"istumque\",\n  \"istiusque\",\n  \"istique\",\n  \"istoque\",\n  \"istaque\",\n  \"istamque\",\n  \"istudque\",\n  \"istosque\",\n  \"istorumque\",\n  \"istisque\",\n  \"istasque\",\n  \"istarumque\"\n];\n\nconst quidam = [\n  \"quidam\",\n  \"quendam\",\n  \"cuiusdam\",\n  \"cuidam\",\n  \"quodam\",\n  \"quaedam\",\n  \"quandam\",\n  \"quodam\",\n  \"quoddam\",\n  \"quosdam\",\n  \"quorundam\",\n  \"quibusdam\",\n  \"quasdam\",\n  \"quarundam\",\n  \"quiddam\",\n  \"quoddam\",\n  \"quadam\",\n  \"quidamque\",\n  \"quendamque\",\n  \"cuiusdamque\",\n  \"cuidamque\",\n  \"quodamque\",\n  \"quaedamque\",\n  \"quandamque\",\n  \"quodamque\",\n  \"quoddamque\",\n  \"quosdamque\",\n  \"quorundamque\",\n  \"quibusdamque\",\n  \"quasdamque\",\n  \"quarundamque\",\n  \"quiddamque\",\n  \"quoddamque\",\n  \"quadamque\"\n];\n\nconst consonant = [\"b\", \"c\", \"d\", \"f\", \"g\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\nconst alius = [\n  \"alius\",\n  \"alium\",\n  \"alii\",\n  \"alio\",\n  \"alia\",\n  \"aliam\",\n  \"aliud\",\n  \"alios\",\n  \"aliorum\",\n  \"aliis\",\n  \"aliae\",\n  \"alias\",\n  \"aliarum\",\n  \"aliusque\",\n  \"aliumque\",\n  \"aliique\",\n  \"alioque\",\n  \"aliaque\",\n  \"aliamque\",\n  \"aliudque\",\n  \"aliosque\",\n  \"aliorumque\",\n  \"aliisque\",\n  \"aliaeque\",\n  \"aliasque\",\n  \"aliarumque\"\n];\n\nconst priu = [\"priusquam\", \"prius quam\"];\n\nconst anteq = [\"antequam\", \"ante quam\"];\n\nconst quom = [\"quominus\", \"quo minus\"];\n\nconst dum = [\"dum\", \"dumque\"];\n\nconst quin = [\"quin\"];\n\nconst o = [\"o\"];\n\nconst atque = [\"atque\"];\n\nconst ut = [\"ut\", \"utei\", \"utque\"];\n\nconst gerund = [\"ndum\", \"ndus\", \"ndorum\", \"ndarum\", \"ndumque\", \"ndusque\", \"ndorumque\", \"ndarumque\"];\n\nconst vocatives = [\"e\", \"i\", \"a\", \"u\", \"ae\", \"es\", \"um\", \"us\"];\n\nconst prepositions = [\n  \"ab\",\n  \"abs\",\n  \"e\",\n  \"ex\",\n  \"apud\",\n  \"de\",\n  \"cis\",\n  \"erga\",\n  \"inter\",\n  \"ob\",\n  \"penes\",\n  \"per\",\n  \"praeter\",\n  \"propter\",\n  \"trans\",\n  \"absque\",\n  \"pro\",\n  \"tenus\",\n  \"sub\",\n  \"aque\",\n  \"abque\",\n  \"eque\",\n  \"exque\",\n  \"apudque\",\n  \"deque\",\n  \"cisque\",\n  \"ergaque\",\n  \"interque\",\n  \"obque\",\n  \"penesque\",\n  \"perque\",\n  \"praeterque\",\n  \"propterque\",\n  \"transque\",\n  \"proque\",\n  \"tenusque\",\n  \"subque\"\n];\n\nconst cumClauses = [\"a\", \"e\", \"i\", \"o\", \"u\", \"is\", \"ibus\", \"ebus\", \"obus\", \"ubus\"];\n\nconst relatives = [\n  \"qui\",\n  \"cuius\",\n  \"cui\",\n  \"quem\",\n  \"quo\",\n  \"quae\",\n  \"quam\",\n  \"qua\",\n  \"quod\",\n  \"quorum\",\n  \"quibus\",\n  \"quos\",\n  \"quarum\",\n  \"quas\"\n];\n\nconst abbreviations = [\n  \"Caes\",\n  \"Iul\",\n  \"Plur\",\n  \"Aug\",\n  \"Prid\",\n  \"Id\",\n  \"Kal\",\n  \"Kl\",\n  \"Non\",\n  \"Med\",\n  \"Ex\",\n  \"In\",\n  \"Ian\",\n  \"Feb\",\n  \"Febr\",\n  \"Mart\",\n  \"Apr\",\n  \"Iun\",\n  \"Mai\",\n  \"Nov\",\n  \"Oct\",\n  \"Sept\",\n  \"Dec\",\n  \"Fin\",\n  \"Cos\",\n  \"Coss\",\n  \"Pr\",\n  \"Sext\",\n  \"Ann\",\n  \"Sal\",\n  \"Imp\",\n  \"Tr\",\n  \"Pl\",\n  \"Leg\",\n  \"Aed\",\n  \"Cens\",\n  \"Agr\",\n  \"Ant\",\n  \"Aur\",\n  \"Cn\",\n  \"Scrib\",\n  \"Fab\",\n  \"Pom\",\n  \"Quir\",\n  \"Pup\",\n  \"An\",\n  \"Ter\",\n  \"Op\",\n  \"Germ\",\n  \"Gn\",\n  \"Ap\",\n  \"M’\",\n  \"Mai\",\n  \"Mam\",\n  \"Men\",\n  \"Min\",\n  \"Oct\",\n  \"Opet\",\n  \"Pro\",\n  \"Quint\",\n  \"Quinct\",\n  \"Sec\",\n  \"Ser\",\n  \"Sert\",\n  \"Serv\",\n  \"Seq\",\n  \"Sex\",\n  \"Sp\",\n  \"St\",\n  \"Ti\",\n  \"Tib\",\n  \"Vol\",\n  \"Vop\",\n  \"Aem\",\n  \"Aim\",\n  \"Rom\",\n  \"Pont\",\n  \"Imp\",\n  \"Max\",\n  \"Coll\",\n  \"Ob \",\n  \"Lib\",\n  \"Cir\",\n  \"Ver\",\n  \"III\",\n  \"Eq\",\n  \"eq\",\n  \"I\",\n  \"II\",\n  \"III\",\n  \"IIII\",\n  \"IV\",\n  \"V\",\n  \"VI\",\n  \"VII\",\n  \"VIII\",\n  \"VIIII\",\n  \"IX\",\n  \"X\",\n  \"XI\",\n  \"XII\",\n  \"XIII\",\n  \"XIIII\",\n  \"XIV\",\n  \"XV\",\n  \"XVI\",\n  \"XVII\",\n  \"XVIII\",\n  \"XVIIII\",\n  \"XIX\",\n  \"XX\",\n  \"XXI\",\n  \"XXII\",\n  \"XXIII\",\n  \"XXIIII\",\n  \"XXIV\",\n  \"XXV\",\n  \"XXVI\",\n  \"XXVII\",\n  \"XXVIII\",\n  \"XXVIIII\",\n  \"XXIX\",\n  \"XXX\",\n  \"XXXI\",\n  \"XXXII\",\n  \"XXXIII\",\n  \"XXXIIII\",\n  \"XXXIV\",\n  \"XXXV\",\n  \"XXXVI\",\n  \"XXXVII\",\n  \"XXXVIII\",\n  \"XXXVIIII\",\n  \"XXXIX\",\n  \"XXXX\",\n  \"XL\",\n  \"XLI\",\n  \"XLII\",\n  \"XLIII\",\n  \"XLIIII\",\n  \"XLIV\",\n  \"XLV\",\n  \"XLVI\",\n  \"XLVII\",\n  \"XLVIII\",\n  \"XLVIIII\",\n  \"XLIX\",\n  \"L\",\n  \"LI\",\n  \"LII\",\n  \"LIII\",\n  \"LIIII\",\n  \"LIV\",\n  \"LV\",\n  \"LVI\",\n  \"LVII\",\n  \"LVIII\",\n  \"LVIIII\",\n  \"LIX\",\n  \"LX\",\n  \"LXI\",\n  \"LXII\",\n  \"LXIII\",\n  \"LXIIII\",\n  \"LXIV\",\n  \"LXV\",\n  \"LXVI\",\n  \"LXVII\",\n  \"LXVIII\",\n  \"LXVIIII\",\n  \"LXIX\",\n  \"LXX\",\n  \"LXXI\",\n  \"LXXII\",\n  \"LXXIII\",\n  \"LXXIIII\",\n  \"LXXIV\",\n  \"LXXV\",\n  \"LXXVI\",\n  \"LXXVII\",\n  \"LXXVIII\",\n  \"LXXVIIII\",\n  \"LXXIX\",\n  \"LXXX\",\n  \"LXXXI\",\n  \"LXXXII\",\n  \"LXXXIII\",\n  \"LXXXIIII\",\n  \"LXXXIV\",\n  \"LXXXV\",\n  \"LXXXVI\",\n  \"LXXXVII\",\n  \"LXXXVIII\",\n  \"LXXXVIIII\",\n  \"LXXXIX\",\n  \"LXXXX\",\n  \"XC\",\n  \"XCI\",\n  \"XCII\",\n  \"XCIII\",\n  \"XCIIII\",\n  \"XCIV\",\n  \"XCV\",\n  \"XCVI\",\n  \"XCVII\",\n  \"XCVIII\",\n  \"XCVIIII\",\n  \"XCIX\",\n  \"C\",\n  \"CC\",\n  \"CCC\",\n  \"CCCC\",\n  \"CD\",\n  \"D\",\n  \"DC\",\n  \"DCC\",\n  \"DCCC\",\n  \"DCCCC\",\n  \"CM\",\n  \"M\",\n  \"MM\",\n  \"MMM\",\n  \"MMMM\"\n];\n\nconst occurences = (str, words) => {\n  const end = \"\\\\b\";\n  const regex = end + \"(\" + words.join(\"|\") + \")\" + end;\n  const re = new RegExp(regex, \"gi\");\n  if (str.match(re)) {\n    return str.match(re).length;\n  } else {\n    return 0;\n  }\n};\n\nconst multiOccurence = (str, listArray) => {\n  str = str.toLowerCase().split(\" \");\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (listArray.includes(str[i]) || str[i].endsWith(\"que\")) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startWith = (str, list) => {\n  for (let i = 0; i < list.length; i++) {\n    if (str.startsWith(list[i])) return true;\n  }\n};\n\nconst endWith = (str, list) => {\n  let count = 0;\n  for (var i = 0; i < list.length; i++) {\n    if (str.endsWith(list[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst interrogative = (str) => {\n  let count = 0;\n  str = str.split(\" \");\n  const l = str.length;\n  for (let i = 0; i < l; i++) {\n    if (str[i].indexOf(\"?\") != -1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst countWords = (str) => {\n  str = str.replace();\n  return str.trim().split(/\\s+/).length;\n};\n\nconst sigFig = (num) => {\n  if (num) {\n    return Number(num.toFixed(5));\n  } else {\n    return 0;\n  }\n};\n\nfunction startf(a1, str) {\n  const consonant = [\n    \"b\",\n    \"c\",\n    \"d\",\n    \"f\",\n    \"g\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\"\n  ];\n\n  let count = 0;\n  const string = a1.toLowerCase().split(\" \");\n  const l = string.length;\n  for (let i = 0; i < l; i++) {\n    let p = (i + 1) % l;\n    if (string[i] === \"atque\" && startWith(string[p], consonant)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconst charCount = (str) => {\n  str = str.replace(/[^a-zA-Z0-9]+/gi, \"\").replace(/\\s/g, \"\");\n  return str.length;\n};\n\nconst multiSplit = (str, delimeters) => {\n  const result = [str];\n  if (typeof delimeters == \"string\") delimeters = [delimeters];\n  while (delimeters.length > 0) {\n    for (let i = 0; i < result.length; i++) {\n      const tempSplit = result[i].split(delimeters[0]);\n      result = result\n        .slice(0, i)\n        .concat(tempSplit)\n        .concat(result.slice(i + 1));\n    }\n    delimeters.shift();\n  }\n  return result;\n};\n\nconst relative = (a1, list) => {\n  function findall(regex_pattern, string_) {\n    let output_list = [];\n    while (true) {\n      let a_match = regex_pattern.exec(string_);\n      if (a_match) {\n        delete a_match.input;\n        output_list.push(a_match);\n      } else {\n        break;\n      }\n    }\n    return output_list;\n  }\n\n  function regexIndexOf(text, reg, y) {\n    const ree = new RegExp(\"\\\\b(\" + reg + \")\\\\b\", \"i\");\n    let indexInSuffix;\n    if (reg === \".\" || reg === \",\" || reg === \":\" || reg === \"!\") {\n      indexInSuffix = text.indexOf(reg, y);\n    } else {\n      ifIndex = text.slice(y).match(ree);\n      if (ifIndex) {\n        indexInSuffix = ifIndex.index + y;\n      } else {\n        indexInSuffix = -1;\n      }\n    }\n    return indexInSuffix;\n  }\n\n  let count = 0;\n  let sentCount = 0;\n  let ttArray = 0;\n  let stringCon = [];\n  let relativeArray = [];\n  const l = a1.length;\n  for (let i = 0; i < l; i++) {\n    const occ = occurences(a1[i], list);\n    if (a1[i].indexOf(\"!\") > -1 || a1[i].indexOf(\".\") > -1) {\n      sentCount += 1;\n    }\n    if ((a1[i].indexOf(\"!\") > -1 && occ >= 1) || (a1[i].indexOf(\".\") > -1 && occ >= 1)) {\n      const re = new RegExp(\"\\\\b(\" + list.join(\"|\") + \")\\\\b\", \"gi\");\n      const allArray = findall(re, a1[i]);\n      const mergeArray = list.concat([\",\", \":\", \".\", \"!\", \";\"]);\n      for (let d = 0; d < allArray.length; d++) {\n        let foundIndexes = mergeArray\n          .map((x) => regexIndexOf(a1[i], x, allArray[d].index + 1))\n          .filter((x) => x !== -1 && x !== allArray[d].index);\n        foundIndexes = Math.min(...foundIndexes);\n        const str = a1[i].slice(allArray[d].index, foundIndexes);\n        relativeArray.push(str);\n      }\n      count += 1;\n    }\n  }\n\n  const finalString = relativeArray.toString();\n  const stringCount = finalString.replace(/[^a-zA-Z0-9]+/gi, \"\").replace(/\\s/g, \"\");\n  return {\n    relative: count / sentCount,\n    mean: stringCount.length / relativeArray.length\n  };\n};\n\nconst removePunct = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\n\\r]+/gi, \" \");\n};\n\nconst endf = (string, str, a2) => {\n  let count = 0;\n  string = removePunct(string);\n  string = string.split(\" \");\n  for (let i = 0; i < string.length; i++) {\n    let p = (i + 1) % string.length;\n    let first = string[i].toLowerCase();\n    let second = string[p];\n    if (first === \"o\" && endWith(second, a2)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst cumClause = (a1, a2) => {\n  a1 = removePunct(a1);\n\n  const str = \"cum\";\n  let count = 0;\n  const string = a1.toLowerCase().split(\" \");\n  const l = string.length;\n  for (let i = 0; i < l; i++) {\n    let p = (i + 1) % l;\n    if (string[i] === str && endWith(string[p], a2) !== 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst endGerund = (a1, a2) => {\n  let count = 0;\n  a1 = removePunct(a1);\n  const string = a1.toLowerCase().split(\" \");\n  const l = string.length;\n  for (let i = 0; i < l; i++) {\n    if (endWith(string[i], a2) && string[i] !== \"nondum\") {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst superlatives = (str) => {\n  let count = 0;\n  str = str.toLowerCase();\n  str = str.split(\" \");\n  const substring = \"issim\";\n  const l = str.length;\n  for (let i = 0; i < l; i++) {\n    if (str[i].includes(substring)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst topNgrams = (str) => {\n  function updateFrequency(frequencies, word) {\n    frequencies[word] = (frequencies[word] || 0) + 1;\n    return frequencies;\n  }\n\n  const n = 5;\n  let words = str\n    .replace(/[^a-zA-Z0-9]+/gi, \" \")\n    .trim()\n    .split(/\\s+/);\n  let frequencies = {};\n  let orderedFrequencies = [];\n  let word;\n  let frequency;\n  let result = [];\n\n  words.reduce(updateFrequency, frequencies);\n  for (word in frequencies) {\n    frequency = frequencies[word];\n    (orderedFrequencies[frequency] = orderedFrequencies[frequency] || []).push(word);\n  }\n  while (result.length < n && orderedFrequencies.length) {\n    (words = orderedFrequencies.pop()) && (result = result.concat(words));\n  }\n  return result.slice(0, n);\n};\n\nconst meanSentence = (a1) => {\n  let five = 0;\n  for (let de = 0; de < a1.length; de++) {\n    const strip = a1[de].replace(/[^a-zA-Z0-9]+/gi, \"\").trim();\n    five += strip.length;\n  }\n\n  return five / a1.length;\n};\n\nconst listO = [\n  {feature: \"p1\", list: \"personalPronoun\"},\n  {feature: \"p2\", list: \"demonstrativePronoun\"},\n  {feature: \"p3\", list: \"quidam\"},\n  {feature: \"p4\", list: \"reflexivePronoun\"},\n  {feature: \"p5\", list: \"iste\"},\n  {feature: \"n1\", list: \"alius\"},\n  {feature: \"n2\", list: \"ipse\"},\n  {feature: \"n3\", list: \"idem\"},\n  {feature: \"s6\", list: \"priu\"},\n  {feature: \"s5\", list: \"anteq\"},\n  {feature: \"s4\", list: \"quom\"},\n  {feature: \"s7\", list: \"dum\"},\n  {feature: \"s3\", list: \"quin\"},\n  {feature: \"m4\", list: \"ut\"},\n  {feature: \"s1\", list: \"conditionalClauses\"},\n  {feature: \"m7\", list: \"prepositions\"}\n];\n\nconst listF = [\n  {feature: \"m1\", list: \"\", name: \"interrogative(book)\"},\n  {feature: \"m3\", list: \"\", name: \"superlatives(book)\"},\n  {feature: \"c2\", name: \"startf(book, atque)\"},\n  {feature: \"s8\", list: \"relatives\", name: \"relative(sentences, relatives)\"},\n  {feature: \"m5\", name: \"endGerund(book, gerund)\"},\n  {feature: \"s2\", name: \"cumClause(book, cumClauses)\"}\n];\n\nconst listC = [\n  {\n    feature: \"c1\",\n    name: \"multiOccurence(ngramRemoved, conjunctions, conjunctionsIn)\"\n  },\n  {feature: \"m2\", name: \"endf(ngramRemoved, o, vocatives)\"}\n];\n\nMeteor.methods({\n  async stylometryf(data, options) {\n    const l = data.author.length;\n    let result = [];\n    for (let i = 0; i < l; i++) {\n      const author = data.author[i];\n      const text = data.text[i];\n      const sbook = data.book[i];\n      const query = {\n        author: author\n      };\n      if (text) {\n        query.text = text;\n      }\n      if (sbook) {\n        query.book = sbook;\n      }\n      let tempCursor;\n      if (options.selectAll) {\n        let tempCursor = Stylo.find().fetch();\n        console.log(tempCursor);\n      } else {\n        let tempCursor = Stylo.find(query).fetch();\n      }\n      const fieldName = \"ngram\";\n      for (let doc of tempCursor) {\n        let gramr = {};\n        let candidate = doc;\n        const featureArray = options.feature;\n        let slice = fieldName.split(\".\");\n        for (let i = 0; i < slice.length; i++) {\n          candidate = candidate[slice[i]];\n        }\n        if (candidate) {\n          const book = doc.ngram;\n          let ngramRemoved = book.replace(/[“”\";:&,\\.\\/?\\\\-]/g, \"\").trim();\n          const sentences = tokenizer.sentences(doc.ngram, {\n            abbreviations: abbreviations\n          });\n          const words = Number(countWords(book));\n          const characters = Number(charCount(book));\n          for (let k = 0; k < listO.length; k++) {\n            const b = listO[k].feature;\n            if (featureArray.includes(b)) {\n              let value;\n              try {\n                const value = occurences(book, eval(listO[k].list));\n                gramr[b] = sigFig(value / characters);\n              } catch (error) {\n                console.log(error);\n              }\n            }\n          }\n\n          for (let m = 0; m < listF.length; m++) {\n            const b = listF[m].feature;\n            if (featureArray.includes(b)) {\n              const d = listF[m].name;\n              let value;\n              try {\n                if (listF[m].list === \"relatives\") {\n                  let value = eval(d);\n                  gramr.s8 = sigFig(value.relative);\n                  gramr.s9 = sigFig(value.mean);\n                } else if (listF[m].feature === \"m8\") {\n                  let value = eval(d);\n                  gramr[b] = value;\n                } else if (listF[m].list !== \"\") {\n                  let value = eval(d);\n                  gramr[b] = sigFig(value / characters);\n                } else {\n                  let value = eval(d);\n                  gramr[b] = sigFig(value / characters);\n                }\n              } catch (error) {\n                console.log(error);\n              }\n            }\n          }\n\n          for (let i = 0; i < listC.length; i++) {\n            const b = listC[i].feature;\n            if (featureArray.includes(b)) {\n              const d = listC[i].name;\n              let value;\n              try {\n                const value = eval(d);\n                gramr[b] = sigFig(value / characters);\n              } catch (error) {\n                console.log(error);\n              }\n            }\n          }\n\n          if (sentences.length <= 1) {\n            gramr.m6 = 1;\n          } else {\n            gramr.m6 = sigFig(meanSentence(sentences));\n          }\n          gramr.characters = characters.toLocaleString();\n          gramr.words = words.toLocaleString();\n          if (doc.book) {\n            gramr.name = doc.author + \" \" + doc.text + \" \" + doc.book;\n          } else if (doc.text) {\n            gramr.name = doc.author + \" \" + doc.text;\n          } else {\n            gramr.name = doc.author;\n          }\n          gramr.sentences = sentences.length;\n          gramr.type = doc.format;\n        }\n        result.push(gramr);\n      }\n    }\n    return result;\n  },\n  authors() {\n    const authorArray = Author.find()\n      .fetch()\n      .map((x) => x.author);\n    return [...new Set(authorArray)];\n  },\n  texts(author) {\n    const textArray = Authors.find({author: author}, {sort: {_id: -1}})\n      .fetch()\n      .map((x) => x.text);\n    return [...new Set(textArray)];\n  },\n  books(author, text) {\n    const bookArray = Authors.find({author: author, text: text}, {sort: {_id: -1}})\n      .fetch()\n      .map((x) => x.book);\n    return [...new Set(bookArray)];\n  }\n});\n"]},"sourceType":"script","hash":"77fb8efa677a8266a43b52cbbc39b097cd9de96b"}
